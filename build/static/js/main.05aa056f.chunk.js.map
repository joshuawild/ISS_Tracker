{"version":3,"sources":["components/Scroll.js","components/ErrorBoundry.js","components/Map.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","LocationPin","text","className","icon","locationIcon","Map","location","zoomLevel","Date","lat","lng","bootstrapURLKeys","key","center","defaultZoom","address","App","getData","fetch","then","response","json","iss_position","latitude","longitude","intervalID","setInterval","bind","clearInterval","parseFloat","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qQAUeA,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,oGAEJG,KAAKX,MAAMK,a,GAhBCQ,a,gCCwBnBC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,sBAAKC,UAAU,MAAf,UACE,cAAC,OAAD,CAAMC,KAAMC,IAAcF,UAAU,aACpC,mBAAGA,UAAU,WAAb,SAAyBD,QAKdI,EA5BL,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAb,OACR,sBAAKL,UAAU,MAAf,UACE,qBAAIA,UAAU,SAAd,mCAA8CM,UAC9C,qBAAIN,UAAU,SAAd,uBAAkCI,EAASG,IAA3C,eAA4DH,EAASI,OACrE,qBAAKR,UAAU,aAAf,SACE,cAAC,IAAD,CACES,iBAAkB,CAAEC,IAAK,IACzBC,OAAQP,EACRQ,YAAaP,EAHf,SAKE,cAAC,EAAD,CACEE,IAAKH,EAASG,IACdC,IAAKJ,EAASI,IACdT,KAAMK,EAASS,kBC8CZC,E,kDA1DX,aAAc,IAAD,8BACT,gBAsBJC,QAAU,WACRC,MAAM,2CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAI,EAAKxB,SAAS,CAACyB,SAAUD,EAAaA,aAAaC,SAAUC,UAAWF,EAAaA,aAAaE,gBAxBxH,EAAK/B,MAAQ,CACT8B,SAAU,EACVC,UAAW,GAJN,E,qDAUb,WACI3B,KAAKoB,UACLpB,KAAK4B,WAAaC,YAAY7B,KAAKoB,QAAQU,KAAK9B,MAAO,O,kCAG3D,WAKE+B,cAAc/B,KAAK4B,c,oBASrB,WACI,MAAgC5B,KAAKJ,MAA7B8B,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAEZlB,EAAW,CACfS,QAAS,8BACTN,IAAKoB,WAAWN,EAAU,IAC1Bb,IAAKmB,WAAWL,EAAW,KAG7B,OAAQD,EAASO,OAOT,sBAAK5B,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,UACA,cAAC,EAAD,UACE,cAAC,EAAD,CAAKI,SAAUA,EAAUC,UAAW,WAV9C,yBAASL,UAAU,kBAAnB,SACA,qBAAKA,UAAU,yBAAf,SACE,oBAAIA,UAAU,iCAAd,6B,GA1CIH,aCMHgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhDX,M","file":"static/js/main.05aa056f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Opppps. You found an error - please reach out to the support desk.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport './Map.css'\nimport { Icon } from '@iconify/react';\nimport locationIcon from '@iconify-icons/mdi/map-marker';\n\nconst Map = ({ location, zoomLevel }) => (\n    <div className=\"map\">\n      <h2 className=\"map-h2\">Location last updated {Date()}</h2>\n      <h2 className=\"map-h2\">Latitude: {location.lat} Longitude: {location.lng}</h2>\n      <div className=\"google-map\">\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: '' }} // Enter Google API Key for unrestricted version of maps. \n          center={location}\n          defaultZoom={zoomLevel}\n        >\n          <LocationPin\n            lat={location.lat}\n            lng={location.lng}\n            text={location.address}\n          />\n        </GoogleMapReact>\n      </div>\n    </div>\n  )\n\n  const LocationPin = ({ text }) => (\n    <div className=\"pin\">\n      <Icon icon={locationIcon} className=\"pin-icon\" />\n      <p className=\"pin-text\">{text}</p>\n    </div>\n  )\n  \n\n  export default Map","import React, { Component } from 'react';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Map from '../components/Map'\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            latitude: 0,\n            longitude: 0\n        }\n    }\n\n    intervalID;\n\n    componentDidMount() {\n        this.getData();\n        this.intervalID = setInterval(this.getData.bind(this), 3000);\n    }\n\n    componentWillUnmount() {\n      /*\n        stop getData() from continuing to run even\n        after unmounting this component\n      */\n      clearInterval(this.intervalID);\n    }\n\n    getData = () => {\n      fetch('http://api.open-notify.org/iss-now.json')\n        .then(response => response.json())\n        .then(iss_position => this.setState({latitude: iss_position.iss_position.latitude, longitude: iss_position.iss_position.longitude }))\n    }\n\n    render() {\n        const { latitude, longitude } = this.state;\n        \n        const location = {\n          address: 'International Space Station',\n          lat: parseFloat(latitude, 10),\n          lng: parseFloat(longitude, 10)\n        };\n\n        return !latitude.length ?\n            <article className='vh-100 dt w-100'>\n            <div className=\"dtc v-mid tc ph3 ph4-l\">\n              <h1 className=\"f6 f2-m f-subheadline-l fw6 tc\">Loading</h1>\n            </div>\n          </article> : \n           (\n                <div className='tc'>\n                    <h1 className='F2'>ISS Tracker</h1>\n                    <Scroll>\n                    <ErrorBoundry>\n                      <Map location={location} zoomLevel={4} />\n                    </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n        }\n\n    }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n                <App />,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}